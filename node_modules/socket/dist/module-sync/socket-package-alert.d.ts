/// <reference types="node" />
import { CompactSocketArtifact } from "./artifact.js";
import { Spinner } from '@socketsecurity/registry/lib/spinner';
type SocketPackageAlert = {
    key: string;
    type: string;
    block: boolean;
    critical: boolean;
    display: boolean;
    fixable: boolean;
    raw: any;
    upgrade: boolean;
};
type AlertsByPkgId = Map<string, SocketPackageAlert[]>;
type AlertIncludeFilter = {
    critical?: boolean | undefined;
    cve?: boolean | undefined;
    existing?: boolean | undefined;
    unfixable?: boolean | undefined;
    upgrade?: boolean | undefined;
};
type AddSocketArtifactAlertToAlertsMapOptions = {
    consolidate?: boolean | undefined;
    include?: AlertIncludeFilter | undefined;
    overrides?: {
        [key: string]: string;
    } | undefined;
    spinner?: Spinner | undefined;
};
declare function addArtifactToAlertsMap(artifact: CompactSocketArtifact, alertsByPkgId: AlertsByPkgId, options?: AddSocketArtifactAlertToAlertsMapOptions | undefined): Promise<void>;
type CveExcludeFilter = {
    upgrade?: boolean | undefined;
};
type CveInfoByPkgId = Map<string, Array<{
    firstPatchedVersionIdentifier: string;
    vulnerableVersionRange: string;
}>>;
type GetCveInfoByPackageOptions = {
    exclude?: CveExcludeFilter | undefined;
};
declare function getCveInfoByAlertsMap(alertsMap: AlertsByPkgId, options?: GetCveInfoByPackageOptions | undefined): CveInfoByPkgId | null;
type LogAlertsMapOptions = {
    output?: NodeJS.WriteStream | undefined;
};
declare function logAlertsMap(alertsMap: AlertsByPkgId, options: LogAlertsMapOptions): void;
export { SocketPackageAlert, AlertsByPkgId, addArtifactToAlertsMap, getCveInfoByAlertsMap, logAlertsMap };
