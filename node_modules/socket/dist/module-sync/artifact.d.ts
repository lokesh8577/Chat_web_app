import { Remap } from '@socketsecurity/registry/lib/objects';
type CveAlertType = 'cve' | 'mediumCVE' | 'mildCVE' | 'criticalCVE';
type SocketArtifactAlert = {
    key: string;
    type: string;
    severity: string;
    category: string;
    action?: string | undefined;
    actionPolicyIndex?: number | undefined;
    file?: string | undefined;
    props?: any | undefined;
    start?: number | undefined;
    end?: number | undefined;
};
type SocketArtifact = {
    type: string;
    name: string;
    namespace?: string | undefined;
    version?: string | undefined;
    subpath?: string | undefined;
    release?: string | undefined;
    id?: string | undefined;
    author?: string[];
    license?: string | undefined;
    licenseDetails?: Array<{
        spdxDisj: string;
        provenance: string;
        filepath: string;
        match_strength: number;
    }>;
    licenseAttrib?: Array<{
        attribText: string;
        attribData: Array<{
            purl: string;
            foundInFilepath: string;
            spdxExpr: string;
            foundAuthors: string[];
        }>;
    }>;
    score?: {
        supplyChain: number;
        quality: number;
        maintenance: number;
        vulnerability: number;
        license: number;
        overall: number;
    };
    alerts?: SocketArtifactAlert[];
    size?: number | undefined;
    batchIndex?: number | undefined;
};
type CompactSocketArtifactAlert = Remap<Omit<SocketArtifactAlert, 'action' | 'actionPolicyIndex' | 'category' | 'end' | 'file' | 'start'>>;
type CompactSocketArtifact = Remap<Omit<SocketArtifact, 'alerts' | 'batchIndex' | 'size'> & {
    alerts: CompactSocketArtifactAlert[];
}>;
type ArtifactAlertCve = Remap<Omit<CompactSocketArtifactAlert, 'type'> & {
    type: CveAlertType;
}>;
type ArtifactAlertCveFixable = Remap<Omit<CompactSocketArtifactAlert, 'props'> & {
    type: CveAlertType;
    props: {
        firstPatchedVersionIdentifier: string;
        vulnerableVersionRange: string;
        [key: string]: any;
    };
}>;
type ArtifactAlertUpgrade = Remap<Omit<CompactSocketArtifactAlert, 'type'> & {
    type: 'socketUpgradeAvailable';
}>;
declare function batchScan(pkgIds: string[], concurrencyLimit?: number): AsyncGenerator<CompactSocketArtifact>;
declare function isArtifactAlertCve(alert: CompactSocketArtifactAlert): alert is ArtifactAlertCve;
declare function isArtifactAlertCveFixable(alert: CompactSocketArtifactAlert): alert is ArtifactAlertCveFixable;
declare function isArtifactAlertUpgrade(alert: CompactSocketArtifactAlert): alert is ArtifactAlertUpgrade;
declare function isArtifactAlertFixable(alert: CompactSocketArtifactAlert): alert is ArtifactAlertCveFixable | ArtifactAlertUpgrade;
export { CveAlertType, SocketArtifactAlert, SocketArtifact, CompactSocketArtifactAlert, CompactSocketArtifact, ArtifactAlertCve, ArtifactAlertCveFixable, ArtifactAlertUpgrade, batchScan, isArtifactAlertCve, isArtifactAlertCveFixable, isArtifactAlertUpgrade, isArtifactAlertFixable };
