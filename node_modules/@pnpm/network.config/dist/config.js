"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pickSettingByUrl = void 0;
const nerf_dart_1 = __importDefault(require("nerf-dart"));
function getMaxParts(uris) {
    return uris.reduce((max, uri) => {
        const parts = uri.split('/').length;
        return parts > max ? parts : max;
    }, 0);
}
function pickSettingByUrl(generic, uri) {
    if (!generic)
        return undefined;
    if (generic[uri])
        return generic[uri];
    /* const { nerf, withoutPort } = parseUri(uri); */
    const nerf = (0, nerf_dart_1.default)(uri);
    const withoutPort = removePort(new URL(uri));
    if (generic[nerf])
        return generic[nerf];
    if (generic[withoutPort])
        return generic[withoutPort];
    const maxParts = getMaxParts(Object.keys(generic));
    const parts = nerf.split('/');
    for (let i = Math.min(parts.length, maxParts) - 1; i >= 3; i--) {
        const key = `${parts.slice(0, i).join('/')}/`;
        if (generic[key]) {
            return generic[key];
        }
    }
    if (withoutPort !== uri) {
        return pickSettingByUrl(generic, withoutPort);
    }
    return undefined;
}
exports.pickSettingByUrl = pickSettingByUrl;
function removePort(config) {
    if (config.port === '')
        return config.href;
    config.port = '';
    const res = config.toString();
    return res.endsWith('/') ? res : `${res}/`;
}
//# sourceMappingURL=config.js.map