"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePref = void 0;
// cspell:ignore sshurl
const url_1 = __importStar(require("url"));
const fetch_1 = require("@pnpm/fetch");
const graceful_git_1 = __importDefault(require("graceful-git"));
const hosted_git_info_1 = __importDefault(require("hosted-git-info"));
const gitProtocols = new Set([
    'git',
    'git+http',
    'git+https',
    'git+rsync',
    'git+ftp',
    'git+file',
    'git+ssh',
    'ssh',
]);
async function parsePref(pref) {
    const hosted = hosted_git_info_1.default.fromUrl(pref);
    if (hosted != null) {
        return fromHostedGit(hosted);
    }
    const colonsPos = pref.indexOf(':');
    if (colonsPos === -1)
        return null;
    const protocol = pref.slice(0, colonsPos);
    if (protocol && gitProtocols.has(protocol.toLocaleLowerCase())) {
        const correctPref = correctUrl(pref);
        const url = new url_1.URL(correctPref);
        if (!url?.protocol)
            return null;
        const hash = (url.hash?.length > 1) ? decodeURIComponent(url.hash.slice(1)) : null;
        return {
            fetchSpec: urlToFetchSpec(url),
            normalizedPref: pref,
            ...parseGitParams(hash),
        };
    }
    return null;
}
exports.parsePref = parsePref;
function urlToFetchSpec(url) {
    url.hash = '';
    const fetchSpec = url_1.default.format(url);
    if (fetchSpec.startsWith('git+')) {
        return fetchSpec.slice(4);
    }
    return fetchSpec;
}
async function fromHostedGit(hosted) {
    let fetchSpec = null;
    // try git/https url before fallback to ssh url
    const gitHttpsUrl = hosted.https({ noCommittish: true, noGitPlus: true });
    if (gitHttpsUrl && await isRepoPublic(gitHttpsUrl) && await accessRepository(gitHttpsUrl)) {
        fetchSpec = gitHttpsUrl;
    }
    else {
        const gitSshUrl = hosted.ssh({ noCommittish: true });
        if (gitSshUrl && await accessRepository(gitSshUrl)) {
            fetchSpec = gitSshUrl;
        }
    }
    if (!fetchSpec) {
        const httpsUrl = hosted.https({ noGitPlus: true, noCommittish: true });
        if (httpsUrl) {
            if (hosted.auth && await accessRepository(httpsUrl)) {
                return {
                    fetchSpec: httpsUrl,
                    hosted: {
                        ...hosted,
                        _fill: hosted._fill,
                        tarball: undefined,
                    },
                    normalizedPref: `git+${httpsUrl}`,
                    ...parseGitParams(hosted.committish),
                };
            }
            else {
                try {
                    // when git ls-remote private repo, it asks for login credentials.
                    // use HTTP HEAD request to test whether this is a private repo, to avoid login prompt.
                    // this is very similar to yarn's behavior.
                    // npm instead tries git ls-remote directly which prompts user for login credentials.
                    // HTTP HEAD on https://domain/user/repo, strip out ".git"
                    const response = await (0, fetch_1.fetch)(httpsUrl.replace(/\.git$/, ''), { method: 'HEAD', follow: 0, retry: { retries: 0 } });
                    if (response.ok) {
                        fetchSpec = httpsUrl;
                    }
                }
                catch (e) {
                    // ignore
                }
            }
        }
    }
    if (!fetchSpec) {
        // use ssh url for likely private repo
        fetchSpec = hosted.sshurl({ noCommittish: true });
    }
    return {
        fetchSpec: fetchSpec,
        hosted: {
            ...hosted,
            _fill: hosted._fill,
            tarball: hosted.tarball,
        },
        normalizedPref: hosted.shortcut(),
        ...parseGitParams(hosted.committish),
    };
}
async function isRepoPublic(httpsUrl) {
    try {
        const response = await (0, fetch_1.fetch)(httpsUrl.replace(/\.git$/, ''), { method: 'HEAD', follow: 0, retry: { retries: 0 } });
        return response.ok;
    }
    catch (_err) {
        return false;
    }
}
async function accessRepository(repository) {
    try {
        await (0, graceful_git_1.default)(['ls-remote', '--exit-code', repository, 'HEAD'], { retries: 0 });
        return true;
    }
    catch (err) { // eslint-disable-line
        return false;
    }
}
function parseGitParams(committish) {
    const result = { gitCommittish: null };
    if (!committish) {
        return result;
    }
    const params = committish.split('&');
    for (const param of params) {
        if (param.length >= 7 && param.slice(0, 7) === 'semver:') {
            result.gitRange = param.slice(7);
        }
        else if (param.slice(0, 5) === 'path:') {
            result.path = param.slice(5);
        }
        else {
            result.gitCommittish = param;
        }
    }
    return result;
}
// handle SCP-like URLs
// see https://github.com/yarnpkg/yarn/blob/5682d55/src/util/git.js#L103
function correctUrl(gitUrl) {
    const parsed = url_1.default.parse(gitUrl.replace(/^git\+/, '')); // eslint-disable-line n/no-deprecated-api
    if (parsed.protocol === 'ssh:' &&
        parsed.hostname &&
        parsed.pathname &&
        parsed.pathname.startsWith('/:') &&
        parsed.port === null) {
        parsed.pathname = parsed.pathname.replace(/^\/:/, '');
        return url_1.default.format(parsed);
    }
    return gitUrl;
}
//# sourceMappingURL=parsePref.js.map